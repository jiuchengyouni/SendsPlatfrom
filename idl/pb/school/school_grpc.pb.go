// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: school.proto

package school

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchoolService_SchoolPing_FullMethodName     = "/SchoolService/SchoolPing"
	SchoolService_SchoolGpa_FullMethodName      = "/SchoolService/SchoolGpa"
	SchoolService_SchoolSchedule_FullMethodName = "/SchoolService/SchoolSchedule"
	SchoolService_SchoolGrade_FullMethodName    = "/SchoolService/SchoolGrade"
	SchoolService_SchoolXuefen_FullMethodName   = "/SchoolService/SchoolXuefen"
)

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolServiceClient interface {
	SchoolPing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolPingResponse, error)
	SchoolGpa(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolGpaResponse, error)
	SchoolSchedule(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolScheduleResponse, error)
	SchoolGrade(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolGradeResponse, error)
	SchoolXuefen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolXuefenResponse, error)
}

type schoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolServiceClient(cc grpc.ClientConnInterface) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) SchoolPing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolPingResponse, error) {
	out := new(SchoolPingResponse)
	err := c.cc.Invoke(ctx, SchoolService_SchoolPing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) SchoolGpa(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolGpaResponse, error) {
	out := new(SchoolGpaResponse)
	err := c.cc.Invoke(ctx, SchoolService_SchoolGpa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) SchoolSchedule(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolScheduleResponse, error) {
	out := new(SchoolScheduleResponse)
	err := c.cc.Invoke(ctx, SchoolService_SchoolSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) SchoolGrade(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolGradeResponse, error) {
	out := new(SchoolGradeResponse)
	err := c.cc.Invoke(ctx, SchoolService_SchoolGrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) SchoolXuefen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchoolXuefenResponse, error) {
	out := new(SchoolXuefenResponse)
	err := c.cc.Invoke(ctx, SchoolService_SchoolXuefen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServiceServer is the server API for SchoolService service.
// All implementations must embed UnimplementedSchoolServiceServer
// for forward compatibility
type SchoolServiceServer interface {
	SchoolPing(context.Context, *emptypb.Empty) (*SchoolPingResponse, error)
	SchoolGpa(context.Context, *emptypb.Empty) (*SchoolGpaResponse, error)
	SchoolSchedule(context.Context, *emptypb.Empty) (*SchoolScheduleResponse, error)
	SchoolGrade(context.Context, *emptypb.Empty) (*SchoolGradeResponse, error)
	SchoolXuefen(context.Context, *emptypb.Empty) (*SchoolXuefenResponse, error)
	mustEmbedUnimplementedSchoolServiceServer()
}

// UnimplementedSchoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchoolServiceServer struct {
}

func (UnimplementedSchoolServiceServer) SchoolPing(context.Context, *emptypb.Empty) (*SchoolPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchoolPing not implemented")
}
func (UnimplementedSchoolServiceServer) SchoolGpa(context.Context, *emptypb.Empty) (*SchoolGpaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchoolGpa not implemented")
}
func (UnimplementedSchoolServiceServer) SchoolSchedule(context.Context, *emptypb.Empty) (*SchoolScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchoolSchedule not implemented")
}
func (UnimplementedSchoolServiceServer) SchoolGrade(context.Context, *emptypb.Empty) (*SchoolGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchoolGrade not implemented")
}
func (UnimplementedSchoolServiceServer) SchoolXuefen(context.Context, *emptypb.Empty) (*SchoolXuefenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchoolXuefen not implemented")
}
func (UnimplementedSchoolServiceServer) mustEmbedUnimplementedSchoolServiceServer() {}

// UnsafeSchoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolServiceServer will
// result in compilation errors.
type UnsafeSchoolServiceServer interface {
	mustEmbedUnimplementedSchoolServiceServer()
}

func RegisterSchoolServiceServer(s grpc.ServiceRegistrar, srv SchoolServiceServer) {
	s.RegisterService(&SchoolService_ServiceDesc, srv)
}

func _SchoolService_SchoolPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).SchoolPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_SchoolPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).SchoolPing(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_SchoolGpa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).SchoolGpa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_SchoolGpa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).SchoolGpa(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_SchoolSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).SchoolSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_SchoolSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).SchoolSchedule(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_SchoolGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).SchoolGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_SchoolGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).SchoolGrade(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_SchoolXuefen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).SchoolXuefen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolService_SchoolXuefen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).SchoolXuefen(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolService_ServiceDesc is the grpc.ServiceDesc for SchoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SchoolPing",
			Handler:    _SchoolService_SchoolPing_Handler,
		},
		{
			MethodName: "SchoolGpa",
			Handler:    _SchoolService_SchoolGpa_Handler,
		},
		{
			MethodName: "SchoolSchedule",
			Handler:    _SchoolService_SchoolSchedule_Handler,
		},
		{
			MethodName: "SchoolGrade",
			Handler:    _SchoolService_SchoolGrade_Handler,
		},
		{
			MethodName: "SchoolXuefen",
			Handler:    _SchoolService_SchoolXuefen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school.proto",
}
