// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: boBing.proto

package boBing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BoBingService_BoBingPing_FullMethodName           = "/BoBingService/BoBingPing"
	BoBingService_BoBingPublish_FullMethodName        = "/BoBingService/BoBingPublish"
	BoBingService_BoBingKey_FullMethodName            = "/BoBingService/BoBingKey"
	BoBingService_BoBingToTalTen_FullMethodName       = "/BoBingService/BoBingToTalTen"
	BoBingService_BoBingDayRank_FullMethodName        = "/BoBingService/BoBingDayRank"
	BoBingService_BoBingDayInit_FullMethodName        = "/BoBingService/BoBingDayInit"
	BoBingService_BoBingTianXuan_FullMethodName       = "/BoBingService/BoBingTianXuan"
	BoBingService_BoBingGetCount_FullMethodName       = "/BoBingService/BoBingGetCount"
	BoBingService_BoBingRetransmission_FullMethodName = "/BoBingService/BoBingRetransmission"
	BoBingService_BoBingBroadcastCheck_FullMethodName = "/BoBingService/BoBingBroadcastCheck"
	BoBingService_BoBingRecord_FullMethodName         = "/BoBingService/BoBingRecord"
	BoBingService_BoBingBlacklist_FullMethodName      = "/BoBingService/BoBingBlacklist"
	BoBingService_BoBingGetNumber_FullMethodName      = "/BoBingService/BoBingGetNumber"
)

// BoBingServiceClient is the client API for BoBingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoBingServiceClient interface {
	BoBingPing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingPingResponse, error)
	// rpc BoBingInit(BoBingInitRequest)returns(google.protobuf.Empty);
	BoBingPublish(ctx context.Context, in *BoBingPublishRequest, opts ...grpc.CallOption) (*BoBingPublishResponse, error)
	BoBingKey(ctx context.Context, in *BoBingKeyRequest, opts ...grpc.CallOption) (*BoBingKeyResponse, error)
	BoBingToTalTen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingToTalTenResponse, error)
	BoBingDayRank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingDayRankResponse, error)
	BoBingDayInit(ctx context.Context, in *BoBingInitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BoBingTianXuan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingTianXuanResponse, error)
	BoBingGetCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingGetCountResponse, error)
	BoBingRetransmission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BoBingBroadcastCheck(ctx context.Context, in *BoBingBroadcastCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BoBingRecord(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingRecordResponse, error)
	BoBingBlacklist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BoBingGetNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingGetNumberResponse, error)
}

type boBingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoBingServiceClient(cc grpc.ClientConnInterface) BoBingServiceClient {
	return &boBingServiceClient{cc}
}

func (c *boBingServiceClient) BoBingPing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingPingResponse, error) {
	out := new(BoBingPingResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingPing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingPublish(ctx context.Context, in *BoBingPublishRequest, opts ...grpc.CallOption) (*BoBingPublishResponse, error) {
	out := new(BoBingPublishResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingKey(ctx context.Context, in *BoBingKeyRequest, opts ...grpc.CallOption) (*BoBingKeyResponse, error) {
	out := new(BoBingKeyResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingToTalTen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingToTalTenResponse, error) {
	out := new(BoBingToTalTenResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingToTalTen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingDayRank(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingDayRankResponse, error) {
	out := new(BoBingDayRankResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingDayRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingDayInit(ctx context.Context, in *BoBingInitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoBingService_BoBingDayInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingTianXuan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingTianXuanResponse, error) {
	out := new(BoBingTianXuanResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingTianXuan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingGetCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingGetCountResponse, error) {
	out := new(BoBingGetCountResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingGetCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingRetransmission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoBingService_BoBingRetransmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingBroadcastCheck(ctx context.Context, in *BoBingBroadcastCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoBingService_BoBingBroadcastCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingRecord(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingRecordResponse, error) {
	out := new(BoBingRecordResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingBlacklist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoBingService_BoBingBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boBingServiceClient) BoBingGetNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoBingGetNumberResponse, error) {
	out := new(BoBingGetNumberResponse)
	err := c.cc.Invoke(ctx, BoBingService_BoBingGetNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoBingServiceServer is the server API for BoBingService service.
// All implementations must embed UnimplementedBoBingServiceServer
// for forward compatibility
type BoBingServiceServer interface {
	BoBingPing(context.Context, *emptypb.Empty) (*BoBingPingResponse, error)
	// rpc BoBingInit(BoBingInitRequest)returns(google.protobuf.Empty);
	BoBingPublish(context.Context, *BoBingPublishRequest) (*BoBingPublishResponse, error)
	BoBingKey(context.Context, *BoBingKeyRequest) (*BoBingKeyResponse, error)
	BoBingToTalTen(context.Context, *emptypb.Empty) (*BoBingToTalTenResponse, error)
	BoBingDayRank(context.Context, *emptypb.Empty) (*BoBingDayRankResponse, error)
	BoBingDayInit(context.Context, *BoBingInitRequest) (*emptypb.Empty, error)
	BoBingTianXuan(context.Context, *emptypb.Empty) (*BoBingTianXuanResponse, error)
	BoBingGetCount(context.Context, *emptypb.Empty) (*BoBingGetCountResponse, error)
	BoBingRetransmission(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	BoBingBroadcastCheck(context.Context, *BoBingBroadcastCheckRequest) (*emptypb.Empty, error)
	BoBingRecord(context.Context, *emptypb.Empty) (*BoBingRecordResponse, error)
	BoBingBlacklist(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	BoBingGetNumber(context.Context, *emptypb.Empty) (*BoBingGetNumberResponse, error)
	mustEmbedUnimplementedBoBingServiceServer()
}

// UnimplementedBoBingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoBingServiceServer struct {
}

func (UnimplementedBoBingServiceServer) BoBingPing(context.Context, *emptypb.Empty) (*BoBingPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingPing not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingPublish(context.Context, *BoBingPublishRequest) (*BoBingPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingPublish not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingKey(context.Context, *BoBingKeyRequest) (*BoBingKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingKey not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingToTalTen(context.Context, *emptypb.Empty) (*BoBingToTalTenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingToTalTen not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingDayRank(context.Context, *emptypb.Empty) (*BoBingDayRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingDayRank not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingDayInit(context.Context, *BoBingInitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingDayInit not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingTianXuan(context.Context, *emptypb.Empty) (*BoBingTianXuanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingTianXuan not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingGetCount(context.Context, *emptypb.Empty) (*BoBingGetCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingGetCount not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingRetransmission(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingRetransmission not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingBroadcastCheck(context.Context, *BoBingBroadcastCheckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingBroadcastCheck not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingRecord(context.Context, *emptypb.Empty) (*BoBingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingRecord not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingBlacklist(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingBlacklist not implemented")
}
func (UnimplementedBoBingServiceServer) BoBingGetNumber(context.Context, *emptypb.Empty) (*BoBingGetNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoBingGetNumber not implemented")
}
func (UnimplementedBoBingServiceServer) mustEmbedUnimplementedBoBingServiceServer() {}

// UnsafeBoBingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoBingServiceServer will
// result in compilation errors.
type UnsafeBoBingServiceServer interface {
	mustEmbedUnimplementedBoBingServiceServer()
}

func RegisterBoBingServiceServer(s grpc.ServiceRegistrar, srv BoBingServiceServer) {
	s.RegisterService(&BoBingService_ServiceDesc, srv)
}

func _BoBingService_BoBingPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingPing(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoBingPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingPublish(ctx, req.(*BoBingPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoBingKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingKey(ctx, req.(*BoBingKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingToTalTen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingToTalTen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingToTalTen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingToTalTen(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingDayRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingDayRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingDayRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingDayRank(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingDayInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoBingInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingDayInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingDayInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingDayInit(ctx, req.(*BoBingInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingTianXuan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingTianXuan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingTianXuan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingTianXuan(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingGetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingGetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingGetCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingGetCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingRetransmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingRetransmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingRetransmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingRetransmission(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingBroadcastCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoBingBroadcastCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingBroadcastCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingBroadcastCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingBroadcastCheck(ctx, req.(*BoBingBroadcastCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingRecord(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingBlacklist(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoBingService_BoBingGetNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoBingServiceServer).BoBingGetNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoBingService_BoBingGetNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoBingServiceServer).BoBingGetNumber(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BoBingService_ServiceDesc is the grpc.ServiceDesc for BoBingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoBingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BoBingService",
	HandlerType: (*BoBingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BoBingPing",
			Handler:    _BoBingService_BoBingPing_Handler,
		},
		{
			MethodName: "BoBingPublish",
			Handler:    _BoBingService_BoBingPublish_Handler,
		},
		{
			MethodName: "BoBingKey",
			Handler:    _BoBingService_BoBingKey_Handler,
		},
		{
			MethodName: "BoBingToTalTen",
			Handler:    _BoBingService_BoBingToTalTen_Handler,
		},
		{
			MethodName: "BoBingDayRank",
			Handler:    _BoBingService_BoBingDayRank_Handler,
		},
		{
			MethodName: "BoBingDayInit",
			Handler:    _BoBingService_BoBingDayInit_Handler,
		},
		{
			MethodName: "BoBingTianXuan",
			Handler:    _BoBingService_BoBingTianXuan_Handler,
		},
		{
			MethodName: "BoBingGetCount",
			Handler:    _BoBingService_BoBingGetCount_Handler,
		},
		{
			MethodName: "BoBingRetransmission",
			Handler:    _BoBingService_BoBingRetransmission_Handler,
		},
		{
			MethodName: "BoBingBroadcastCheck",
			Handler:    _BoBingService_BoBingBroadcastCheck_Handler,
		},
		{
			MethodName: "BoBingRecord",
			Handler:    _BoBingService_BoBingRecord_Handler,
		},
		{
			MethodName: "BoBingBlacklist",
			Handler:    _BoBingService_BoBingBlacklist_Handler,
		},
		{
			MethodName: "BoBingGetNumber",
			Handler:    _BoBingService_BoBingGetNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boBing.proto",
}
